/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClockControllerFrame.java
 *
 * Created on Nov 8, 2009, 1:31:58 AM
 */

package org.blackchip.widget.example.clock;

import org.blackchip.widget.TimeController;
import org.blackchip.widget.TimeModel;
import org.blackchip.widget.ValueListener;

/**
 *
 * @author mcgann
 */
public class ClockControllerFrame extends javax.swing.JFrame {

    private TimeModel model;
    private TimeController controller;

    /** Creates new form ClockControllerFrame */
    public ClockControllerFrame(TimeModel model, TimeController controller)
    {
        this.model = model;
        this.controller = controller;

        initComponents();

        sliderHour.setMinimum(1);
        sliderHour.setMaximum(12);
        sliderHour.setExtent(1);
        sliderHour.setSnapToTicks(true);

        sliderMinute.setMinimum(0);
        sliderMinute.setMaximum(60);
        sliderMinute.setExtent(1);
        sliderMinute.setSnapToTicks(true);

        sliderSecond.setMinimum(0);
        sliderSecond.setMaximum(60);
        sliderSecond.setExtent(1);
        sliderSecond.setSnapToTicks(true);

        updateFromModel();

        model.addListener(new ValueListener() {
            public void valueChanged()
            {
                updateFromModel();
            }
        });
    }

    private void updateFromModel()
    {
        checkCurrent.setSelected(controller.isRunning());
        enableComponents(!controller.isRunning());

        int hour = (int)Math.floor(model.getHourModel().getValue());
        int minute = (int)model.getMinuteModel().getValue();
        int second = (int)model.getSecondModel().getValue();

        sliderHour.setValue(hour);
        textHour.setText(String.valueOf(hour));

        sliderMinute.setValue(minute);
        textMinute.setText(String.valueOf(minute));

        sliderSecond.setValue(second);
        textSecond.setText(String.valueOf(second));


    }

    private void enableComponents(boolean e)
    {
        sliderHour.setEnabled(e);
        sliderMinute.setEnabled(e);
        sliderSecond.setEnabled(e);
        textHour.setEnabled(e);
        textMinute.setEnabled(e);
        textSecond.setEnabled(e);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderHour = new javax.swing.JSlider();
        sliderMinute = new javax.swing.JSlider();
        sliderSecond = new javax.swing.JSlider();
        textHour = new javax.swing.JTextField();
        textMinute = new javax.swing.JTextField();
        textSecond = new javax.swing.JTextField();
        checkCurrent = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sliderHour.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderHourStateChanged(evt);
            }
        });

        sliderMinute.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMinuteStateChanged(evt);
            }
        });

        sliderSecond.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSecondStateChanged(evt);
            }
        });

        textHour.setText("jTextField1");

        textMinute.setText("jTextField2");

        textSecond.setText("jTextField3");

        checkCurrent.setText("Current");
        checkCurrent.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkCurrentStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sliderHour, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(textHour, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkCurrent)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderMinute, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(16, 16, 16))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderSecond, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkCurrent))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkCurrentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkCurrentStateChanged
        if ( checkCurrent.isSelected() )
        {
            controller.start();
        }
        else
        {
            controller.stop();
        }
        updateFromModel();
    }//GEN-LAST:event_checkCurrentStateChanged

    private void sliderHourStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderHourStateChanged
        model.setHour(sliderHour.getValue());
    }//GEN-LAST:event_sliderHourStateChanged

    private void sliderMinuteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMinuteStateChanged
        model.setMinute(sliderMinute.getValue());
    }//GEN-LAST:event_sliderMinuteStateChanged

    private void sliderSecondStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSecondStateChanged
        model.setSecond(sliderSecond.getValue());
    }//GEN-LAST:event_sliderSecondStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkCurrent;
    private javax.swing.JSlider sliderHour;
    private javax.swing.JSlider sliderMinute;
    private javax.swing.JSlider sliderSecond;
    private javax.swing.JTextField textHour;
    private javax.swing.JTextField textMinute;
    private javax.swing.JTextField textSecond;
    // End of variables declaration//GEN-END:variables

}
